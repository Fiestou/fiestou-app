name: Project Auto Move

on:
  pull_request:
    types: [opened, reopened, closed]
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  pull-requests: read
  issues: write
  projects: write

jobs:
  move:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const eventName = context.eventName;
            const action = context.payload.action;

            // === CONFIGURE AQUI ===
            const ORG = "Fiestou";                 // org dona do Project
            const PROJECT_NUMBER = 1;              // número do Project (Project v2)
            const STATUS_FIELD = "Status";         // nome do campo
            const TO_CODE_REVIEW = "Code Review";
            const TO_TESTING = "Testing";
            const TO_DONE = "Done";
            // ======================

            // Helper: GraphQL
            const gql = (query, variables) => github.graphql(query, variables);

            // Busca Project, campo Status e opções
            const project = await gql(`
              query($org:String!, $number:Int!) {
                organization(login:$org) {
                  projectV2(number:$number) {
                    id
                    fields(first:50){
                      nodes{
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id name }
                        }
                      }
                    }
                  }
                }
              }`, { org: ORG, number: PROJECT_NUMBER });

            const pj = project.organization.projectV2;
            const statusField = pj.fields.nodes.find(f => f && f.name === STATUS_FIELD);
            const optId = (name) => statusField.options.find(o => o.name === name)?.id;
            const toId = {
              review: optId(TO_CODE_REVIEW),
              testing: optId(TO_TESTING),
              done: optId(TO_DONE),
            };

            // Pega issues linkadas via "Closes #123"
            const body = pr.body || "";
            const issueNums = [...body.matchAll(/(close[sd]?|fix(e[sd])?|resolve[sd]?)\s+#(\d+)/ig)].map(m => Number(m[3]));

            if (issueNums.length === 0) {
              core.info("Nenhuma issue referenciada (Closes #123). Nada a mover.");
              return;
            }

            // Busca IDs das issues
            const issues = await Promise.all(issueNums.map(n =>
              gql(`query($owner:String!,$repo:String!,$n:Int!){
                repository(owner:$owner, name:$repo){
                  issue(number:$n){ id }
                }
              }`, { owner: context.repo.owner, repo: context.repo.repo, n })
            ));

            // Garante item no Project e atualiza Status
            const addItem = async (contentId) => {
              // adiciona ao project (idempotente: se já existe, falha silenciosa)
              const item = await gql(`
                mutation($projectId:ID!, $contentId:ID!){
                  addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                    item { id }
                  }
                }`, { projectId: pj.id, contentId });

              return item.addProjectV2ItemById.item.id;
            };

            const setStatus = async (itemId, optionId) => {
              if (!optionId) return;
              await gql(`
                mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$projectId,
                    itemId:$itemId,
                    fieldId:$fieldId,
                    value:{ singleSelectOptionId:$optionId }
                  }){ clientMutationId }
                }`, { projectId: pj.id, itemId, fieldId: statusField.id, optionId });
            };

            const moveTo = async (optionIdName) => {
              for (const i of issues) {
                const contentId = i.repository.issue.id;
                const itemId = (await addItem(contentId));
                await setStatus(itemId, toId[optionIdName]);
              }
            };

            // Regras
            if (eventName === "pull_request" && (action === "opened" || action === "reopened")) {
              await moveTo("review");
            } else if (eventName === "pull_request_review" && context.payload.review.state.toLowerCase() === "approved") {
              await moveTo("testing");
            } else if (eventName === "pull_request" && action === "closed" && pr.merged) {
              await moveTo("done");
            }
