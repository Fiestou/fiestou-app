name: Project Move on PR

on:
  pull_request:
    types: [opened, reopened, closed]
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  pull-requests: read
  issues: write
  projects: write

jobs:
  move_by_pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const action = context.payload.action;
            const eventName = context.eventName;

            // === CONFIG ===
            const ORG = "Fiestou";
            const PROJECT_NUMBER = 1;
            const STATUS_FIELD = "Status";
            const TO_IN_REVIEW = "In Review";
            const TO_TESTING   = "Testing";   // se quiser evoluir após 'approved'
            const TO_DONE      = "Done";      // fallback se não rastrear deploy
            // =============

            const gql = (q, v) => github.graphql(q, v);

            // Busca Project + Status
            const { organization: { projectV2 } } = await gql(`
              query($org:String!, $num:Int!) {
                organization(login:$org) {
                  projectV2(number:$num) {
                    id
                    fields(first:50) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id name }
                        }
                      }
                    }
                  }
                }
              }
            `, { org: ORG, num: PROJECT_NUMBER });

            const statusField = projectV2.fields.nodes.find(f => f && f.name === STATUS_FIELD);
            const optId = (name) => statusField.options.find(o => o.name === name)?.id;

            // Issues ligadas no corpo do PR (Closes #123 etc.)
            const body = pr.body || "";
            const issueNums = [...body.matchAll(/(close[sd]?|fix(e[sd])?|resolve[sd]?)\s+#(\d+)/ig)].map(m => Number(m[3]));
            if (issueNums.length === 0) { core.info("PR sem 'Closes #N'. Nada a mover."); return; }

            const moveIssuesTo = async (optionName) => {
              const optionId = optId(optionName);
              if (!optionId) { core.info(`Opção '${optionName}' não encontrada.`); return; }

              for (const n of issueNums) {
                const { repository: { issue } } = await gql(`
                  query($owner:String!,$repo:String!,$n:Int!) {
                    repository(owner:$owner, name:$repo){ issue(number:$n){ id } }
                  }
                `, { owner: context.repo.owner, repo: context.repo.repo, n });

                if (!issue) continue;

                const addRes = await gql(`
                  mutation($projectId:ID!, $contentId:ID!){
                    addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                      item { id }
                    }
                  }
                `, { projectId: projectV2.id, contentId: issue.id });

                const itemId = addRes.addProjectV2ItemById.item.id;

                await gql(`
                  mutation($projectId:ID!,$itemId:ID!,$fieldId:ID!,$opt:String!){
                    updateProjectV2ItemFieldValue(input:{
                      projectId:$projectId,
                      itemId:$itemId,
                      fieldId:$fieldId,
                      value:{ singleSelectOptionId:$opt }
                    }) { clientMutationId }
                  }
                `, { projectId: projectV2.id, itemId, fieldId: statusField.id, opt: optionId });

                core.info(`Issue #${n} → ${optionName}`);
              }
            };

            if (eventName === "pull_request" && (action === "opened" || action === "reopened")) {
              await moveIssuesTo(TO_IN_REVIEW);
            } else if (eventName === "pull_request_review" && context.payload.review.state.toLowerCase() === "approved") {
              await moveIssuesTo(TO_TESTING);
            } else if (eventName === "pull_request" && action === "closed" && pr.merged) {
              // Se você não for rastrear deploy por stage/master, pode mandar para Done aqui
              // await moveIssuesTo(TO_DONE);
            }
